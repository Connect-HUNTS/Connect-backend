// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  role         String // (INVESTOR, STARTUP, PARTNER, ADMIN)
  profileImage String?
  investor     Investor?
  startup      Startup?
  partner      Partner?
}

model Investor {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int      @unique
  name               String
  country            String?
  investorType       String[]
  website            String?
  contactInformation String?
  investmentType     String?
  fundingRound       String[]
  type               String[]
  minTicketSize      Float?
  maxTicketSize      Float?
  leadInvestor       Boolean?
  description        String?
  telegram           String?
  linkedin           String?
  rate               String?
}

model Startup {
  id                       Int      @id @default(autoincrement())
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int      @unique
  name                     String
  country                  String
  website                  String?
  type                     String[]
  description              String
  mainFeatures             String
  pitchDeckLink            String?
  pitchVideoLink           String?
  whitepaperLink           String?
  tokenomicsSource         String?
  raiseType                String
  fundingRound             String?
  fundraisingGoal          Float
  raisedToDate             Float
  previousInvestors        String?
  notableCustomersPartners String?
  tractionMetrics          String?
  teamLinkedInProfiles     String?
  socialMediaLinks         String?
  telegram                 String?
  linkedin                 String?
  otherServicesNeeded      String[]
  discoverySource          String[]
  minInvestmentSize        Float?
  tgeDate                  String?
}

model Partner {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int      @unique
  name         String
  country      String?
  description  String?
  websiteLink  String?
  telegram     String?
  linkedin     String?
  type         String[]
  proposals    String[]
  contactEmail String?
  keyCases     String?
  contact      String?
  averageBill  Float?
  referralFee  String?
}
